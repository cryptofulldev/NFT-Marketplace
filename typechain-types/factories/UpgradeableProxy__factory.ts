/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
  BytesLike,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UpgradeableProxy,
  UpgradeableProxyInterface,
} from "../UpgradeableProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_logic",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040526040516103c63803806103c683398101604081905261002291610148565b61004d60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd610284565b6000805160206103a68339815191521461007757634e487b7160e01b600052600160045260246000fd5b610080826100f8565b8051156100f1576000826001600160a01b0316826040516100a1919061020b565b600060405180830381855af49150503d80600081146100dc576040519150601f19603f3d011682016040523d82523d6000602084013e6100e1565b606091505b50509050806100ef57600080fd5b505b50506102ed565b61010b8161014260201b6100271760201c565b6101305760405162461bcd60e51b815260040161012790610227565b60405180910390fd5b6000805160206103a683398151915255565b3b151590565b6000806040838503121561015a578182fd5b82516001600160a01b0381168114610170578283fd5b60208401519092506001600160401b038082111561018c578283fd5b818501915085601f83011261019f578283fd5b8151818111156101b1576101b16102d7565b604051601f8201601f1916810160200183811182821017156101d5576101d56102d7565b6040528181528382016020018810156101ec578485fd5b6101fd8260208301602087016102a7565b809450505050509250929050565b6000825161021d8184602087016102a7565b9190910192915050565b60208082526036908201527f5570677261646561626c6550726f78793a206e657720696d706c656d656e746160408201527f74696f6e206973206e6f74206120636f6e747261637400000000000000000000606082015260800190565b6000828210156102a257634e487b7160e01b81526011600452602481fd5b500390565b60005b838110156102c25781810151838201526020016102aa565b838111156102d1576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b60ab806102fb6000396000f3fe608060405236601057600e6013565b005b600e5b60196025565b60256021602d565b6052565b565b3b151590565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e8080156070573d6000f35b3d6000fdfea264697066735822122069af755f19bb1f2514ecf528507e474a4de26b49f50c50b65349d3e6c8963abd64736f6c63430008000033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc";

type UpgradeableProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UpgradeableProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UpgradeableProxy__factory extends ContractFactory {
  constructor(...args: UpgradeableProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "UpgradeableProxy";
  }

  deploy(
    _logic: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<UpgradeableProxy> {
    return super.deploy(
      _logic,
      _data,
      overrides || {}
    ) as Promise<UpgradeableProxy>;
  }
  getDeployTransaction(
    _logic: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_logic, _data, overrides || {});
  }
  attach(address: string): UpgradeableProxy {
    return super.attach(address) as UpgradeableProxy;
  }
  connect(signer: Signer): UpgradeableProxy__factory {
    return super.connect(signer) as UpgradeableProxy__factory;
  }
  static readonly contractName: "UpgradeableProxy";
  public readonly contractName: "UpgradeableProxy";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UpgradeableProxyInterface {
    return new utils.Interface(_abi) as UpgradeableProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UpgradeableProxy {
    return new Contract(address, _abi, signerOrProvider) as UpgradeableProxy;
  }
}
