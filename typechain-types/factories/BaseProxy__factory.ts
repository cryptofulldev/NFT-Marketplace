/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
  BytesLike,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BaseProxy, BaseProxyInterface } from "../BaseProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_logic",
        type: "address",
      },
      {
        internalType: "address",
        name: "admin_",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "admin_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "changeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405260405161081d38038061081d833981016040819052610022916101d9565b828161004f60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd610318565b6000805160206107fd8339815191521461007957634e487b7160e01b600052600160045260246000fd5b6100828261015c565b8051156100f3576000826001600160a01b0316826040516100a3919061029f565b600060405180830381855af49150503d80600081146100de576040519150601f19603f3d011682016040523d82523d6000602084013e6100e3565b606091505b50509050806100f157600080fd5b505b50610121905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104610318565b6000805160206107dd8339815191521461014b57634e487b7160e01b600052600160045260246000fd5b610154826101a6565b505050610381565b61016f816101b860201b6101e01760201c565b6101945760405162461bcd60e51b815260040161018b906102bb565b60405180910390fd5b6000805160206107fd83398151915255565b6000805160206107dd83398151915255565b803b15155b919050565b80516001600160a01b03811681146101bd57600080fd5b6000806000606084860312156101ed578283fd5b6101f6846101c2565b9250610204602085016101c2565b60408501519092506001600160401b0380821115610220578283fd5b818601915086601f830112610233578283fd5b8151818111156102455761024561036b565b604051601f8201601f1916810160200183811182821017156102695761026961036b565b604052818152838201602001891015610280578485fd5b61029182602083016020870161033b565b809450505050509250925092565b600082516102b181846020870161033b565b9190910192915050565b60208082526036908201527f5570677261646561626c6550726f78793a206e657720696d706c656d656e746160408201527f74696f6e206973206e6f74206120636f6e747261637400000000000000000000606082015260800190565b60008282101561033657634e487b7160e01b81526011600452602481fd5b500390565b60005b8381101561035657818101518382015260200161033e565b83811115610365576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b61044d806103906000396000f3fe6080604052600436106100435760003560e01c80633659cfe61461005a5780635c60da1b1461007a5780638f283970146100a5578063f851a440146100c557610052565b36610052576100506100da565b005b6100506100da565b34801561006657600080fd5b50610050610075366004610301565b6100f4565b34801561008657600080fd5b5061008f61012e565b60405161009c919061032f565b60405180910390f35b3480156100b157600080fd5b506100506100c0366004610301565b61013d565b3480156100d157600080fd5b5061008f6101d6565b6100e26100f2565b6100f26100ed6101e6565b61020b565b565b6100fc61022f565b6001600160a01b0316336001600160a01b031614156101235761011e81610254565b61012b565b61012b6100da565b50565b60006101386101e6565b905090565b61014561022f565b6001600160a01b0316336001600160a01b03161415610123576001600160a01b03811661018d5760405162461bcd60e51b81526004016101849061035d565b60405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6101b661022f565b826040516101c5929190610343565b60405180910390a161011e81610294565b600061013861022f565b3b151590565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e80801561022a573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b61025d816102b8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b6102c1816101e0565b6102dd5760405162461bcd60e51b8152600401610184906103ba565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b600060208284031215610312578081fd5b81356001600160a01b0381168114610328578182fd5b9392505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6020808252603a908201527f5472616e73706172656e745570677261646561626c6550726f78793a206e657760408201527f2061646d696e20697320746865207a65726f2061646472657373000000000000606082015260800190565b60208082526036908201527f5570677261646561626c6550726f78793a206e657720696d706c656d656e746160408201527f74696f6e206973206e6f74206120636f6e74726163740000000000000000000060608201526080019056fea264697066735822122083d44b9812d63f1ebb22e7b34ece0d6ff28c79d4bb4468c1eb1bdd695c76284464736f6c63430008000033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc";

type BaseProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseProxy__factory extends ContractFactory {
  constructor(...args: BaseProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BaseProxy";
  }

  deploy(
    _logic: string,
    admin_: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<BaseProxy> {
    return super.deploy(
      _logic,
      admin_,
      _data,
      overrides || {}
    ) as Promise<BaseProxy>;
  }
  getDeployTransaction(
    _logic: string,
    admin_: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_logic, admin_, _data, overrides || {});
  }
  attach(address: string): BaseProxy {
    return super.attach(address) as BaseProxy;
  }
  connect(signer: Signer): BaseProxy__factory {
    return super.connect(signer) as BaseProxy__factory;
  }
  static readonly contractName: "BaseProxy";
  public readonly contractName: "BaseProxy";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseProxyInterface {
    return new utils.Interface(_abi) as BaseProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseProxy {
    return new Contract(address, _abi, signerOrProvider) as BaseProxy;
  }
}
