/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VerifiableERC721Test,
  VerifiableERC721TestInterface,
} from "../VerifiableERC721Test";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "assetId",
        type: "uint256",
      },
    ],
    name: "getFingerprint",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_uri",
        type: "string",
      },
    ],
    name: "setTokenURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "assetId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "fingerprint",
        type: "bytes",
      },
    ],
    name: "verifyFingerprint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001d3638038062001d368339810160408190526200003491620001c4565b8181818181600090805190602001906200005092919062000073565b5080516200006690600190602084019062000073565b505050505050506200027e565b82805462000081906200022b565b90600052602060002090601f016020900481019282620000a55760008555620000f0565b82601f10620000c057805160ff1916838001178555620000f0565b82800160010185558215620000f0579182015b82811115620000f0578251825591602001919060010190620000d3565b50620000fe92915062000102565b5090565b5b80821115620000fe576000815560010162000103565b600082601f8301126200012a578081fd5b81516001600160401b038082111562000147576200014762000268565b6040516020601f8401601f19168201810183811183821017156200016f576200016f62000268565b604052838252858401810187101562000186578485fd5b8492505b83831015620001a957858301810151828401820152918201916200018a565b83831115620001ba57848185840101525b5095945050505050565b60008060408385031215620001d7578182fd5b82516001600160401b0380821115620001ee578384fd5b620001fc8683870162000119565b9350602085015191508082111562000212578283fd5b50620002218582860162000119565b9150509250929050565b6002810460018216806200024057607f821691505b602082108114156200026257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611aa8806200028e6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806342966c68116100a257806395d89b411161007157806395d89b4114610246578063a22cb4651461024e578063b88d4fde14610261578063c87b56dd14610274578063e985e9c51461028757610116565b806342966c68146101fa5780636352211e1461020d57806370a08231146102205780638f9f4b631461023357610116565b8063159a6475116100e9578063159a64751461018e578063162094c4146101ae57806323b872dd146101c157806340c10f19146101d457806342842e0e146101e757610116565b806301ffc9a71461011b57806306fdde0314610144578063081812fc14610159578063095ea7b314610179575b600080fd5b61012e6101293660046112a3565b61029a565b60405161013b9190611431565b60405180910390f35b61014c6102c8565b60405161013b9190611445565b61016c6101673660046112db565b61035a565b60405161013b91906113e1565b61018c61018736600461127a565b6103a6565b005b6101a161019c3660046112db565b61043e565b60405161013b919061143c565b61018c6101bc366004611338565b610445565b61018c6101cf36600461119f565b610453565b61018c6101e236600461127a565b61048b565b61018c6101f536600461119f565b610495565b61018c6102083660046112db565b6104b0565b61016c61021b3660046112db565b6104bc565b6101a161022e366004611153565b6104f1565b61012e6102413660046112f3565b610535565b61014c610551565b61018c61025c366004611240565b610560565b61018c61026f3660046111da565b610572565b61014c6102823660046112db565b6105b1565b61012e61029536600461116d565b6106d2565b60006102a582610700565b806102c057506001600160e01b03198216638f9f4b6360e01b145b90505b919050565b6060600080546102d7906119b0565b80601f0160208091040260200160405190810160405280929190818152602001828054610303906119b0565b80156103505780601f1061032557610100808354040283529160200191610350565b820191906000526020600020905b81548152906001019060200180831161033357829003601f168201915b5050505050905090565b600061036582610740565b61038a5760405162461bcd60e51b815260040161038190611792565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006103b1826104bc565b9050806001600160a01b0316836001600160a01b031614156103e55760405162461bcd60e51b815260040161038190611884565b806001600160a01b03166103f761075d565b6001600160a01b0316148061041357506104138161029561075d565b61042f5760405162461bcd60e51b8152600401610381906115b3565b6104398383610761565b505050565b5061123490565b61044f82826107cf565b5050565b61046461045e61075d565b82610813565b6104805760405162461bcd60e51b8152600401610381906118c5565b610439838383610890565b61044f82826109bd565b61043983838360405180602001604052806000815250610572565b6104b981610a9c565b50565b6000818152600260205260408120546001600160a01b0316806102c05760405162461bcd60e51b81526004016103819061165a565b60006001600160a01b0382166105195760405162461bcd60e51b815260040161038190611610565b506001600160a01b031660009081526003602052604090205490565b600061054082610adc565b6105498461043e565b149392505050565b6060600180546102d7906119b0565b61044f61056b61075d565b8383610b5d565b61058361057d61075d565b83610813565b61059f5760405162461bcd60e51b8152600401610381906118c5565b6105ab84848484610c00565b50505050565b60606105bc82610740565b6105d85760405162461bcd60e51b815260040161038190611735565b600082815260066020526040812080546105f1906119b0565b80601f016020809104026020016040519081016040528092919081815260200182805461061d906119b0565b801561066a5780601f1061063f5761010080835404028352916020019161066a565b820191906000526020600020905b81548152906001019060200180831161064d57829003601f168201915b50505050509050600061067b610c33565b905080516000141561068f575090506102c3565b8151156106c15780826040516020016106a99291906113b2565b604051602081830303815290604052925050506102c3565b6106ca84610c45565b949350505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061073157506001600160e01b03198216635b5e139f60e01b145b806102c057506102c082610cc8565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610796826104bc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6107d882610740565b6107f45760405162461bcd60e51b8152600401610381906116a3565b6000828152600660209081526040909120825161043992840190610fdc565b600061081e82610740565b61083a5760405162461bcd60e51b815260040161038190611567565b6000610845836104bc565b9050806001600160a01b0316846001600160a01b031614806108805750836001600160a01b03166108758461035a565b6001600160a01b0316145b806106ca57506106ca81856106d2565b826001600160a01b03166108a3826104bc565b6001600160a01b0316146108c95760405162461bcd60e51b8152600401610381906117de565b6001600160a01b0382166108ef5760405162461bcd60e51b8152600401610381906114ec565b6108fa838383610439565b610905600082610761565b6001600160a01b038316600090815260036020526040812080546001929061092e90849061196d565b90915550506001600160a01b038216600090815260036020526040812080546001929061095c908490611922565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0382166109e35760405162461bcd60e51b815260040161038190611700565b6109ec81610740565b15610a095760405162461bcd60e51b8152600401610381906114b5565b610a1560008383610439565b6001600160a01b0382166000908152600360205260408120805460019290610a3e908490611922565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b610aa581610ce1565b60008181526006602052604090208054610abe906119b0565b1590506104b95760008181526006602052604081206104b991611060565b60008060005b8351811015610b5657610af681600861194e565b848281518110610b1657634e487b7160e01b600052603260045260246000fd5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016901c919091179080610b4e816119eb565b915050610ae2565b5092915050565b816001600160a01b0316836001600160a01b03161415610b8f5760405162461bcd60e51b815260040161038190611530565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190610bf3908590611431565b60405180910390a3505050565b610c0b848484610890565b610c1784848484610d88565b6105ab5760405162461bcd60e51b815260040161038190611458565b60408051602081019091526000815290565b6060610c5082610740565b610c6c5760405162461bcd60e51b815260040161038190611827565b6000610c76610c33565b90506000815111610c965760405180602001604052806000815250610cc1565b80610ca084610ea3565b604051602001610cb19291906113b2565b6040516020818303038152906040525b9392505050565b6001600160e01b031981166301ffc9a760e01b14919050565b6000610cec826104bc565b9050610cfa81600084610439565b610d05600083610761565b6001600160a01b0381166000908152600360205260408120805460019290610d2e90849061196d565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000610d9c846001600160a01b0316610fd6565b15610e9857836001600160a01b031663150b7a02610db861075d565b8786866040518563ffffffff1660e01b8152600401610dda94939291906113f5565b602060405180830381600087803b158015610df457600080fd5b505af1925050508015610e24575060408051601f3d908101601f19168201909252610e21918101906112bf565b60015b610e7e573d808015610e52576040519150601f19603f3d011682016040523d82523d6000602084013e610e57565b606091505b508051610e765760405162461bcd60e51b815260040161038190611458565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506106ca565b506001949350505050565b606081610ec857506040805180820190915260018152600360fc1b60208201526102c3565b8160005b8115610ef25780610edc816119eb565b9150610eeb9050600a8361193a565b9150610ecc565b60008167ffffffffffffffff811115610f1b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610f45576020820181803683370190505b5090505b84156106ca57610f5a60018361196d565b9150610f67600a86611a06565b610f72906030611922565b60f81b818381518110610f9557634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610fcf600a8661193a565b9450610f49565b3b151590565b828054610fe8906119b0565b90600052602060002090601f01602090048101928261100a5760008555611050565b82601f1061102357805160ff1916838001178555611050565b82800160010185558215611050579182015b82811115611050578251825591602001919060010190611035565b5061105c929150611098565b5090565b50805461106c906119b0565b6000825580601f1061107e57506104b9565b601f0160209004906000526020600020908101906104b991905b5b8082111561105c5760008155600101611099565b600067ffffffffffffffff808411156110c8576110c8611a46565b604051601f8501601f1916810160200182811182821017156110ec576110ec611a46565b60405284815291508183850186101561110457600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b03811681146102c357600080fd5b600082601f830112611144578081fd5b610cc1838335602085016110ad565b600060208284031215611164578081fd5b610cc18261111d565b6000806040838503121561117f578081fd5b6111888361111d565b91506111966020840161111d565b90509250929050565b6000806000606084860312156111b3578081fd5b6111bc8461111d565b92506111ca6020850161111d565b9150604084013590509250925092565b600080600080608085870312156111ef578081fd5b6111f88561111d565b93506112066020860161111d565b925060408501359150606085013567ffffffffffffffff811115611228578182fd5b61123487828801611134565b91505092959194509250565b60008060408385031215611252578182fd5b61125b8361111d565b91506020830135801515811461126f578182fd5b809150509250929050565b6000806040838503121561128c578182fd5b6112958361111d565b946020939093013593505050565b6000602082840312156112b4578081fd5b8135610cc181611a5c565b6000602082840312156112d0578081fd5b8151610cc181611a5c565b6000602082840312156112ec578081fd5b5035919050565b60008060408385031215611305578182fd5b82359150602083013567ffffffffffffffff811115611322578182fd5b61132e85828601611134565b9150509250929050565b6000806040838503121561134a578182fd5b82359150602083013567ffffffffffffffff811115611367578182fd5b8301601f81018513611377578182fd5b61132e858235602084016110ad565b6000815180845261139e816020860160208601611984565b601f01601f19169290920160200192915050565b600083516113c4818460208801611984565b8351908301906113d8818360208801611984565b01949350505050565b6001600160a01b0391909116815260200190565b60006001600160a01b038087168352808616602084015250836040830152608060608301526114276080830184611386565b9695505050505050565b901515815260200190565b90815260200190565b600060208252610cc16020830184611386565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527f63656976657220696d706c656d656e7465720000000000000000000000000000606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252602e908201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60408201527f6578697374656e7420746f6b656e000000000000000000000000000000000000606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b60208082526031908201527f45524337323155524953746f726167653a2055524920717565727920666f722060408201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000606082015260800190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606082015260800190565b6000821982111561193557611935611a1a565b500190565b60008261194957611949611a30565b500490565b600081600019048311821515161561196857611968611a1a565b500290565b60008282101561197f5761197f611a1a565b500390565b60005b8381101561199f578181015183820152602001611987565b838111156105ab5750506000910152565b6002810460018216806119c457607f821691505b602082108114156119e557634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156119ff576119ff611a1a565b5060010190565b600082611a1557611a15611a30565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146104b957600080fdfea264697066735822122061f53def91f05f09365b1ecbb03c38e4f4d42eca5177994673e66277712c409264736f6c63430008000033";

type VerifiableERC721TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifiableERC721TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VerifiableERC721Test__factory extends ContractFactory {
  constructor(...args: VerifiableERC721TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "VerifiableERC721Test";
  }

  deploy(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VerifiableERC721Test> {
    return super.deploy(
      name,
      symbol,
      overrides || {}
    ) as Promise<VerifiableERC721Test>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  attach(address: string): VerifiableERC721Test {
    return super.attach(address) as VerifiableERC721Test;
  }
  connect(signer: Signer): VerifiableERC721Test__factory {
    return super.connect(signer) as VerifiableERC721Test__factory;
  }
  static readonly contractName: "VerifiableERC721Test";
  public readonly contractName: "VerifiableERC721Test";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifiableERC721TestInterface {
    return new utils.Interface(_abi) as VerifiableERC721TestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VerifiableERC721Test {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as VerifiableERC721Test;
  }
}
