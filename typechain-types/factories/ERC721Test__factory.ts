/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC721Test, ERC721TestInterface } from "../ERC721Test";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_uri",
        type: "string",
      },
    ],
    name: "setTokenURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001bc538038062001bc58339810160408190526200003491620001bf565b8151829082906200004d9060009060208501906200006e565b508051620000639060019060208401906200006e565b505050505062000279565b8280546200007c9062000226565b90600052602060002090601f016020900481019282620000a05760008555620000eb565b82601f10620000bb57805160ff1916838001178555620000eb565b82800160010185558215620000eb579182015b82811115620000eb578251825591602001919060010190620000ce565b50620000f9929150620000fd565b5090565b5b80821115620000f95760008155600101620000fe565b600082601f83011262000125578081fd5b81516001600160401b038082111562000142576200014262000263565b6040516020601f8401601f19168201810183811183821017156200016a576200016a62000263565b604052838252858401810187101562000181578485fd5b8492505b83831015620001a4578583018101518284018201529182019162000185565b83831115620001b557848185840101525b5095945050505050565b60008060408385031215620001d2578182fd5b82516001600160401b0380821115620001e9578384fd5b620001f78683870162000114565b935060208501519150808211156200020d578283fd5b506200021c8582860162000114565b9150509250929050565b6002810460018216806200023b57607f821691505b602082108114156200025d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61193c80620002896000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806342966c6811610097578063a22cb46511610066578063a22cb46514610212578063b88d4fde14610225578063c87b56dd14610238578063e985e9c51461024b57610100565b806342966c68146101c45780636352211e146101d757806370a08231146101ea57806395d89b411461020a57610100565b8063162094c4116100d3578063162094c41461017857806323b872dd1461018b57806340c10f191461019e57806342842e0e146101b157610100565b806301ffc9a71461010557806306fdde031461012e578063081812fc14610143578063095ea7b314610163575b600080fd5b610118610113366004611191565b61025e565b60405161012591906112e4565b60405180910390f35b6101366102a6565b60405161012591906112ef565b6101566101513660046111c9565b610338565b6040516101259190611294565b610176610171366004611168565b610384565b005b6101766101863660046111e1565b61041c565b61017661019936600461107a565b61042a565b6101766101ac366004611168565b610462565b6101766101bf36600461107a565b61046c565b6101766101d23660046111c9565b610487565b6101566101e53660046111c9565b610493565b6101fd6101f836600461102e565b6104c8565b60405161012591906117cc565b61013661050c565b61017661022036600461112e565b61051b565b6101766102333660046110b5565b61052d565b6101366102463660046111c9565b61056c565b610118610259366004611048565b61068d565b60006001600160e01b031982166380ac58cd60e01b148061028f57506001600160e01b03198216635b5e139f60e01b145b8061029e575061029e826106bb565b90505b919050565b6060600080546102b590611844565b80601f01602080910402602001604051908101604052809291908181526020018280546102e190611844565b801561032e5780601f106103035761010080835404028352916020019161032e565b820191906000526020600020905b81548152906001019060200180831161031157829003601f168201915b5050505050905090565b6000610343826106d4565b6103685760405162461bcd60e51b815260040161035f9061163c565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061038f82610493565b9050806001600160a01b0316836001600160a01b031614156103c35760405162461bcd60e51b815260040161035f9061172e565b806001600160a01b03166103d56106f1565b6001600160a01b031614806103f157506103f1816102596106f1565b61040d5760405162461bcd60e51b815260040161035f9061145d565b61041783836106f5565b505050565b6104268282610763565b5050565b61043b6104356106f1565b826107a7565b6104575760405162461bcd60e51b815260040161035f9061176f565b610417838383610824565b6104268282610951565b6104178383836040518060200160405280600081525061052d565b61049081610a30565b50565b6000818152600260205260408120546001600160a01b03168061029e5760405162461bcd60e51b815260040161035f90611504565b60006001600160a01b0382166104f05760405162461bcd60e51b815260040161035f906114ba565b506001600160a01b031660009081526003602052604090205490565b6060600180546102b590611844565b6104266105266106f1565b8383610a70565b61053e6105386106f1565b836107a7565b61055a5760405162461bcd60e51b815260040161035f9061176f565b61056684848484610b13565b50505050565b6060610577826106d4565b6105935760405162461bcd60e51b815260040161035f906115df565b600082815260066020526040812080546105ac90611844565b80601f01602080910402602001604051908101604052809291908181526020018280546105d890611844565b80156106255780601f106105fa57610100808354040283529160200191610625565b820191906000526020600020905b81548152906001019060200180831161060857829003601f168201915b505050505090506000610636610b46565b905080516000141561064a575090506102a1565b81511561067c578082604051602001610664929190611265565b604051602081830303815290604052925050506102a1565b61068584610b58565b949350505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061072a82610493565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61076c826106d4565b6107885760405162461bcd60e51b815260040161035f9061154d565b6000828152600660209081526040909120825161041792840190610ed6565b60006107b2826106d4565b6107ce5760405162461bcd60e51b815260040161035f90611411565b60006107d983610493565b9050806001600160a01b0316846001600160a01b031614806108145750836001600160a01b031661080984610338565b6001600160a01b0316145b806106855750610685818561068d565b826001600160a01b031661083782610493565b6001600160a01b03161461085d5760405162461bcd60e51b815260040161035f90611688565b6001600160a01b0382166108835760405162461bcd60e51b815260040161035f90611396565b61088e838383610417565b6108996000826106f5565b6001600160a01b03831660009081526003602052604081208054600192906108c2908490611801565b90915550506001600160a01b03821660009081526003602052604081208054600192906108f09084906117d5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0382166109775760405162461bcd60e51b815260040161035f906115aa565b610980816106d4565b1561099d5760405162461bcd60e51b815260040161035f9061135f565b6109a960008383610417565b6001600160a01b03821660009081526003602052604081208054600192906109d29084906117d5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b610a3981610bdb565b60008181526006602052604090208054610a5290611844565b15905061049057600081815260066020526040812061049091610f5a565b816001600160a01b0316836001600160a01b03161415610aa25760405162461bcd60e51b815260040161035f906113da565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190610b069085906112e4565b60405180910390a3505050565b610b1e848484610824565b610b2a84848484610c82565b6105665760405162461bcd60e51b815260040161035f90611302565b60408051602081019091526000815290565b6060610b63826106d4565b610b7f5760405162461bcd60e51b815260040161035f906116d1565b6000610b89610b46565b90506000815111610ba95760405180602001604052806000815250610bd4565b80610bb384610d9d565b604051602001610bc4929190611265565b6040516020818303038152906040525b9392505050565b6000610be682610493565b9050610bf481600084610417565b610bff6000836106f5565b6001600160a01b0381166000908152600360205260408120805460019290610c28908490611801565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000610c96846001600160a01b0316610ed0565b15610d9257836001600160a01b031663150b7a02610cb26106f1565b8786866040518563ffffffff1660e01b8152600401610cd494939291906112a8565b602060405180830381600087803b158015610cee57600080fd5b505af1925050508015610d1e575060408051601f3d908101601f19168201909252610d1b918101906111ad565b60015b610d78573d808015610d4c576040519150601f19603f3d011682016040523d82523d6000602084013e610d51565b606091505b508051610d705760405162461bcd60e51b815260040161035f90611302565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610685565b506001949350505050565b606081610dc257506040805180820190915260018152600360fc1b60208201526102a1565b8160005b8115610dec5780610dd68161187f565b9150610de59050600a836117ed565b9150610dc6565b60008167ffffffffffffffff811115610e1557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610e3f576020820181803683370190505b5090505b841561068557610e54600183611801565b9150610e61600a8661189a565b610e6c9060306117d5565b60f81b818381518110610e8f57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610ec9600a866117ed565b9450610e43565b3b151590565b828054610ee290611844565b90600052602060002090601f016020900481019282610f045760008555610f4a565b82601f10610f1d57805160ff1916838001178555610f4a565b82800160010185558215610f4a579182015b82811115610f4a578251825591602001919060010190610f2f565b50610f56929150610f92565b5090565b508054610f6690611844565b6000825580601f10610f785750610490565b601f01602090049060005260206000209081019061049091905b5b80821115610f565760008155600101610f93565b600067ffffffffffffffff80841115610fc257610fc26118da565b604051601f8501601f191681016020018281118282101715610fe657610fe66118da565b604052848152915081838501861015610ffe57600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b03811681146102a157600080fd5b60006020828403121561103f578081fd5b610bd482611017565b6000806040838503121561105a578081fd5b61106383611017565b915061107160208401611017565b90509250929050565b60008060006060848603121561108e578081fd5b61109784611017565b92506110a560208501611017565b9150604084013590509250925092565b600080600080608085870312156110ca578081fd5b6110d385611017565b93506110e160208601611017565b925060408501359150606085013567ffffffffffffffff811115611103578182fd5b8501601f81018713611113578182fd5b61112287823560208401610fa7565b91505092959194509250565b60008060408385031215611140578182fd5b61114983611017565b91506020830135801515811461115d578182fd5b809150509250929050565b6000806040838503121561117a578182fd5b61118383611017565b946020939093013593505050565b6000602082840312156111a2578081fd5b8135610bd4816118f0565b6000602082840312156111be578081fd5b8151610bd4816118f0565b6000602082840312156111da578081fd5b5035919050565b600080604083850312156111f3578182fd5b82359150602083013567ffffffffffffffff811115611210578182fd5b8301601f81018513611220578182fd5b61122f85823560208401610fa7565b9150509250929050565b60008151808452611251816020860160208601611818565b601f01601f19169290920160200192915050565b60008351611277818460208801611818565b83519083019061128b818360208801611818565b01949350505050565b6001600160a01b0391909116815260200190565b60006001600160a01b038087168352808616602084015250836040830152608060608301526112da6080830184611239565b9695505050505050565b901515815260200190565b600060208252610bd46020830184611239565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527f63656976657220696d706c656d656e7465720000000000000000000000000000606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252602e908201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60408201527f6578697374656e7420746f6b656e000000000000000000000000000000000000606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b60208082526031908201527f45524337323155524953746f726167653a2055524920717565727920666f722060408201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000606082015260800190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606082015260800190565b90815260200190565b600082198211156117e8576117e86118ae565b500190565b6000826117fc576117fc6118c4565b500490565b600082821015611813576118136118ae565b500390565b60005b8381101561183357818101518382015260200161181b565b838111156105665750506000910152565b60028104600182168061185857607f821691505b6020821081141561187957634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611893576118936118ae565b5060010190565b6000826118a9576118a96118c4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461049057600080fdfea26469706673582212201ac3e5459cc84078c4f2a0c26ef45d67d807a9b7b0f4b4c9f8c035df88c75b9664736f6c63430008000033";

type ERC721TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721Test__factory extends ContractFactory {
  constructor(...args: ERC721TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC721Test";
  }

  deploy(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721Test> {
    return super.deploy(_name, _symbol, overrides || {}) as Promise<ERC721Test>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, overrides || {});
  }
  attach(address: string): ERC721Test {
    return super.attach(address) as ERC721Test;
  }
  connect(signer: Signer): ERC721Test__factory {
    return super.connect(signer) as ERC721Test__factory;
  }
  static readonly contractName: "ERC721Test";
  public readonly contractName: "ERC721Test";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721TestInterface {
    return new utils.Interface(_abi) as ERC721TestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721Test {
    return new Contract(address, _abi, signerOrProvider) as ERC721Test;
  }
}
