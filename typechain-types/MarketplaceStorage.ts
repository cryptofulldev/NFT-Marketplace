/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MarketplaceStorageInterface extends utils.Interface {
  contractName: "MarketplaceStorage";
  functions: {
    "ERC721_Interface()": FunctionFragment;
    "InterfaceId_ValidateFingerprint()": FunctionFragment;
    "acceptedToken()": FunctionFragment;
    "orderByAssetId(address,uint256)": FunctionFragment;
    "ownerCutPerMillion()": FunctionFragment;
    "publicationFeeInWei()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ERC721_Interface",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "InterfaceId_ValidateFingerprint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderByAssetId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerCutPerMillion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicationFeeInWei",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC721_Interface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "InterfaceId_ValidateFingerprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderByAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerCutPerMillion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicationFeeInWei",
    data: BytesLike
  ): Result;

  events: {
    "ChangedOwnerCutPerMillion(uint256)": EventFragment;
    "ChangedPublicationFee(uint256)": EventFragment;
    "OrderCancelled(bytes32,uint256,address,address)": EventFragment;
    "OrderCreated(bytes32,uint256,address,address,uint256,uint256)": EventFragment;
    "OrderSuccessful(bytes32,uint256,address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangedOwnerCutPerMillion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedPublicationFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderSuccessful"): EventFragment;
}

export type ChangedOwnerCutPerMillionEvent = TypedEvent<
  [BigNumber],
  { ownerCutPerMillion: BigNumber }
>;

export type ChangedOwnerCutPerMillionEventFilter =
  TypedEventFilter<ChangedOwnerCutPerMillionEvent>;

export type ChangedPublicationFeeEvent = TypedEvent<
  [BigNumber],
  { publicationFee: BigNumber }
>;

export type ChangedPublicationFeeEventFilter =
  TypedEventFilter<ChangedPublicationFeeEvent>;

export type OrderCancelledEvent = TypedEvent<
  [string, BigNumber, string, string],
  { id: string; assetId: BigNumber; seller: string; nftAddress: string }
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export type OrderCreatedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber],
  {
    id: string;
    assetId: BigNumber;
    seller: string;
    nftAddress: string;
    priceInWei: BigNumber;
    expiresAt: BigNumber;
  }
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export type OrderSuccessfulEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, string],
  {
    id: string;
    assetId: BigNumber;
    seller: string;
    nftAddress: string;
    totalPrice: BigNumber;
    buyer: string;
  }
>;

export type OrderSuccessfulEventFilter = TypedEventFilter<OrderSuccessfulEvent>;

export interface MarketplaceStorage extends BaseContract {
  contractName: "MarketplaceStorage";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC721_Interface(overrides?: CallOverrides): Promise<[string]>;

    "ERC721_Interface()"(overrides?: CallOverrides): Promise<[string]>;

    InterfaceId_ValidateFingerprint(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "InterfaceId_ValidateFingerprint()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    acceptedToken(overrides?: CallOverrides): Promise<[string]>;

    "acceptedToken()"(overrides?: CallOverrides): Promise<[string]>;

    orderByAssetId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        id: string;
        seller: string;
        nftAddress: string;
        price: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    "orderByAssetId(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        id: string;
        seller: string;
        nftAddress: string;
        price: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    ownerCutPerMillion(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ownerCutPerMillion()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicationFeeInWei(overrides?: CallOverrides): Promise<[BigNumber]>;

    "publicationFeeInWei()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ERC721_Interface(overrides?: CallOverrides): Promise<string>;

  "ERC721_Interface()"(overrides?: CallOverrides): Promise<string>;

  InterfaceId_ValidateFingerprint(overrides?: CallOverrides): Promise<string>;

  "InterfaceId_ValidateFingerprint()"(
    overrides?: CallOverrides
  ): Promise<string>;

  acceptedToken(overrides?: CallOverrides): Promise<string>;

  "acceptedToken()"(overrides?: CallOverrides): Promise<string>;

  orderByAssetId(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber] & {
      id: string;
      seller: string;
      nftAddress: string;
      price: BigNumber;
      expiresAt: BigNumber;
    }
  >;

  "orderByAssetId(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber] & {
      id: string;
      seller: string;
      nftAddress: string;
      price: BigNumber;
      expiresAt: BigNumber;
    }
  >;

  ownerCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

  "ownerCutPerMillion()"(overrides?: CallOverrides): Promise<BigNumber>;

  publicationFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

  "publicationFeeInWei()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ERC721_Interface(overrides?: CallOverrides): Promise<string>;

    "ERC721_Interface()"(overrides?: CallOverrides): Promise<string>;

    InterfaceId_ValidateFingerprint(overrides?: CallOverrides): Promise<string>;

    "InterfaceId_ValidateFingerprint()"(
      overrides?: CallOverrides
    ): Promise<string>;

    acceptedToken(overrides?: CallOverrides): Promise<string>;

    "acceptedToken()"(overrides?: CallOverrides): Promise<string>;

    orderByAssetId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        id: string;
        seller: string;
        nftAddress: string;
        price: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    "orderByAssetId(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        id: string;
        seller: string;
        nftAddress: string;
        price: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    ownerCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

    "ownerCutPerMillion()"(overrides?: CallOverrides): Promise<BigNumber>;

    publicationFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

    "publicationFeeInWei()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ChangedOwnerCutPerMillion(uint256)"(
      ownerCutPerMillion?: null
    ): ChangedOwnerCutPerMillionEventFilter;
    ChangedOwnerCutPerMillion(
      ownerCutPerMillion?: null
    ): ChangedOwnerCutPerMillionEventFilter;

    "ChangedPublicationFee(uint256)"(
      publicationFee?: null
    ): ChangedPublicationFeeEventFilter;
    ChangedPublicationFee(
      publicationFee?: null
    ): ChangedPublicationFeeEventFilter;

    "OrderCancelled(bytes32,uint256,address,address)"(
      id?: null,
      assetId?: BigNumberish | null,
      seller?: string | null,
      nftAddress?: null
    ): OrderCancelledEventFilter;
    OrderCancelled(
      id?: null,
      assetId?: BigNumberish | null,
      seller?: string | null,
      nftAddress?: null
    ): OrderCancelledEventFilter;

    "OrderCreated(bytes32,uint256,address,address,uint256,uint256)"(
      id?: null,
      assetId?: BigNumberish | null,
      seller?: string | null,
      nftAddress?: null,
      priceInWei?: null,
      expiresAt?: null
    ): OrderCreatedEventFilter;
    OrderCreated(
      id?: null,
      assetId?: BigNumberish | null,
      seller?: string | null,
      nftAddress?: null,
      priceInWei?: null,
      expiresAt?: null
    ): OrderCreatedEventFilter;

    "OrderSuccessful(bytes32,uint256,address,address,uint256,address)"(
      id?: null,
      assetId?: BigNumberish | null,
      seller?: string | null,
      nftAddress?: null,
      totalPrice?: null,
      buyer?: string | null
    ): OrderSuccessfulEventFilter;
    OrderSuccessful(
      id?: null,
      assetId?: BigNumberish | null,
      seller?: string | null,
      nftAddress?: null,
      totalPrice?: null,
      buyer?: string | null
    ): OrderSuccessfulEventFilter;
  };

  estimateGas: {
    ERC721_Interface(overrides?: CallOverrides): Promise<BigNumber>;

    "ERC721_Interface()"(overrides?: CallOverrides): Promise<BigNumber>;

    InterfaceId_ValidateFingerprint(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "InterfaceId_ValidateFingerprint()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    acceptedToken(overrides?: CallOverrides): Promise<BigNumber>;

    "acceptedToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    orderByAssetId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "orderByAssetId(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

    "ownerCutPerMillion()"(overrides?: CallOverrides): Promise<BigNumber>;

    publicationFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

    "publicationFeeInWei()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC721_Interface(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ERC721_Interface()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    InterfaceId_ValidateFingerprint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "InterfaceId_ValidateFingerprint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "acceptedToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderByAssetId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "orderByAssetId(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerCutPerMillion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerCutPerMillion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicationFeeInWei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "publicationFeeInWei()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
